allprojects {
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        withJavadocJar()
        withSourcesJar()
    }

    group = 'org.cadixdev'
    archivesBaseName = project.name.toLowerCase()
    version = '0.5.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation 'org.codehaus.groovy:groovy-all:3.0.7'
        testImplementation 'org.spockframework:spock-core:2.0-M4-groovy-3.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
    }

    test {
        useJUnitPlatform()
    }

    processResources {
        from 'LICENSE.txt'
    }

    javadoc {
        options.encoding = 'UTF-8'
        options.charSet = 'UTF-8'
        options.links(
                'https://docs.oracle.com/javase/8/docs/api/'
        )
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.archivesBaseName
                from components.java

                pom {
                    name = project.name
                    description = project.description
                    packaging = 'jar'
                    url = project.url
                    inceptionYear = project.inceptionYear

                    scm {
                        url = 'https://github.com/CadixDev/Bombe'
                        connection = 'scm:git:https://github.com/CadixDev/Bombe.git'
                        developerConnection = 'scm:git:git@github.com:CadixDev/Bombe.git'
                    }

                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/CadixDev/Bombe/issues'
                    }

                    licenses {
                        license {
                            name = 'BSD 3-Clause'
                            url = 'https://opensource.org/licenses/BSD-3-Clause'
                            distribution = 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'jamierocks'
                            name = 'Jamie Mansfield'
                            email = 'jmansfield@cadixdev.org'
                            url = 'https://www.jamiemansfield.me/'
                            timezone = 'Europe/London'
                        }
                    }
                }
            }
        }
        repositories {
            if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                maven {
                    url = !version.endsWith('-SNAPSHOT') ?
                            'https://oss.sonatype.org/service/local/staging/deploy/maven2/' :
                            'https://oss.sonatype.org/content/repositories/snapshots/'

                    credentials {
                        username = ossrhUsername
                        password = ossrhPassword
                    }
                }
            }
        }
    }

    if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
        apply plugin: 'signing'
        signing {
            required { !version.endsWith('-SNAPSHOT') && gradle.taskGraph.hasTask(tasks.publish) }
            sign publishing.publications.mavenJava
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
    check.dependsOn jacocoTestReport
}

task codeCoverageReport(type: JacocoReport) {
    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled = true
        html.destination file("${buildDir}/reports/jacoco/html")
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}
